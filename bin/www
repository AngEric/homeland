#!/usr/bin/env node

require('dotenv').config();

const http = require('http');
const debug = require('debug')('homeland:server');
const app = require('../configs/app');
const db = require('../databases/models');
const env = process.env.NODE_ENV;
const port = process.env.PORT;

const server = http.createServer(app);
(async () => {
  try {
    await db.sequelize.authenticate();
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  } catch (e) {
    console.error('server error: ', e);
    process.exit(1);
  }
})();

/**
 * @param {string} error
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/**
 *
 */
function onListening() {
  console.log('Running on env:', env);
  console.log('Running on port:', port);
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * @param {string} signal
 */
function handleShutdown(signal) {
  const exitCode = signal === 'uncaughtException' ? 1 : 0;
  console.log(`Kredifazz backend stop running.. Receiving Signal: ${signal}`);
  server.close(() => {
    process.exit(exitCode);
  });
}

process
  .on('SIGTERM', handleShutdown)
  .on('SIGINT', handleShutdown)
  .on('uncaughtException', handleShutdown);

process.on('exit', (code) => {
  console.log(`Kredifazz backend is going to exit with code: ${code}`);
});
